package com.example.demo.config.dbconfig;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;

import com.example.demo.config.DBConfiguration;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
@Configuration
@ConditionalOnProperty(prefix = "spring.", name = "datasource-wspider-cra.use", havingValue = "true", matchIfMissing = false)
@MapperScan(value = "com.example.dao.cra", sqlSessionFactoryRef = "SqlSessionFactory")
public class MyBatisConfiguration {
	
	@Autowired
    Environment env;

    @Autowired
    private ApplicationContext applicationContext;

    @Autowired
    private DBConfiguration dbConfiguration;
    
    @Bean(name = "DataSource")
    public DataSource DataSources() {
    	HikariConfig hikariConfig = dbConfiguration.getHikariConfig();
    	hikariConfig.setJdbcUrl(env.getProperty("spring.datasource.hikari.jdbc-url"));
    	hikariConfig.setUsername(env.getProperty("spring.datasource.hikari.username"));
    	hikariConfig.setPassword(env.getProperty("spring.datasource.hikari.password"));
    	DataSource db = new HikariDataSource(hikariConfig);
    	return db;
    }

    @Bean(name = "SqlSessionFactory")
    public SqlSessionFactory SqlSessionFactory(@Qualifier("DataSource") DataSource DataSource) throws Exception {
        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
        sqlSessionFactoryBean.setDataSource(DataSource);
        sqlSessionFactoryBean.setConfigLocation(applicationContext.getResource("classpath:/mapper/mapper.xml"));
        sqlSessionFactoryBean.setMapperLocations(applicationContext.getResources("classpath:/mapper/sqls/*.xml"));
        return sqlSessionFactoryBean.getObject();
    }

    @Bean(name = "SqlSessionTemplate")
    public SqlSessionTemplate SqlSessionTemplate(SqlSessionFactory SqlSessionFactory) {
        return new SqlSessionTemplate(SqlSessionFactory);
    }

}
